package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.25

import (
	"context"
	"errors"

	"github.com/shota-tech/graphql/server/graph/model"
	"github.com/shota-tech/graphql/server/middleware/auth"
)

// FetchUser is the resolver for the fetchUser field.
func (r *queryResolver) FetchUser(ctx context.Context) (*model.User, error) {
	token := auth.TokenFromContext(ctx)
	claims := token.CustomClaims.(*auth.CustomClaims)
	if !claims.HasScope(auth.ScopeReadUser) {
		return nil, errors.New("invalid scope")
	}
	return r.UserRepository.Get(ctx, token.RegisteredClaims.Subject)
}

// FetchTasks is the resolver for the fetchTasks field.
func (r *queryResolver) FetchTasks(ctx context.Context) ([]*model.Task, error) {
	token := auth.TokenFromContext(ctx)
	claims := token.CustomClaims.(*auth.CustomClaims)
	if !claims.HasScope(auth.ScopeReadTasks) {
		return nil, errors.New("invalid scope")
	}
	return r.TaskRepository.ListByUserID(ctx, token.RegisteredClaims.Subject)
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
